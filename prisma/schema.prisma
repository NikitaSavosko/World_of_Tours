// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  name        String
  image       String?
  description String?
  role        Role     @default(USER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  posts    Post[]
  comments Comment[]
  likes    Like[]
  reviews  Review[]
  saved    Saved[]

  followers        Follows[] @relation("follower") // пользователи, которые подписались на этого пользователя
  following        Follows[] @relation("following") // пользователи, на которых подписан этот пользователь
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model Post {
  id        String   @id @default(cuid())
  authorId  String
  content   String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes    Like[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  postId    String?
  createdAt DateTime @default(now())

  author User  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post   Post? @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([authorId, postId])
}

model Like {
  id         String   @id @default(cuid())
  userId     String
  postId     String?
  tourPostId String?
  createdAt  DateTime @default(now())

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post     Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  tourPost TourPost? @relation(fields: [tourPostId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, tourPostId])
  @@index([userId, postId])
  @@index([userId, tourPostId])
}

model Follows {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("following", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("follower", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@index([followerId, followingId])
}

model TourFirm {
  id          String  @id @default(cuid())
  name        String
  description String?

  tourPosts TourPost[]
  News      News[]
}

model TourPost {
  id          String   @id @default(cuid())
  content     String
  title       String
  description String?
  photo       String
  tourFirmId  String
  createdAt   DateTime @default(now())
  endDate     DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tourFirm     TourFirm       @relation(fields: [tourFirmId], references: [id], onDelete: Cascade)
  likes        Like[]
  reviews      Review[]
  savedBy      Saved[]
  photoGallery PhotoGallery[]
}

model PhotoGallery {
  id         String  @id @default(cuid())
  images     String
  tourPostId String?

  tourPost TourPost? @relation(fields: [tourPostId], references: [id], onDelete: Cascade)
}

model Review {
  id         String   @id @default(cuid())
  content    String
  createdAt  DateTime @default(now())
  authorId   String
  tourPostId String?

  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tourPost TourPost? @relation(fields: [tourPostId], references: [id], onDelete: Cascade)
}

model Saved {
  id         String   @id @default(cuid())
  userId     String
  tourPostId String?
  createdAt  DateTime @default(now())

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tourPost TourPost? @relation(fields: [tourPostId], references: [id], onDelete: Cascade)

  @@unique([userId, tourPostId])
}

model News {
  id         String   @id @default(cuid())
  title      String
  content    String
  createdAt  DateTime @default(now())
  tourFirmId String

  tourFirm TourFirm @relation(fields: [tourFirmId], references: [id], onDelete: Cascade)
}

model Message {
  id          String   @id @default(cuid())
  content     String
  authorId    String
  recipientId String
  createdAt   DateTime @default(now())

  author    User @relation("SentMessages", fields: [authorId], references: [id], onDelete: Cascade)
  recipient User @relation("ReceivedMessages", fields: [recipientId], references: [id], onDelete: Cascade)
}
